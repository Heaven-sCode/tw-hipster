import dayjs from 'dayjs/esm';
<%
// Logic to find unique enum and entity types to import
const uniqueEnumImports = new Map();
entity.fields.forEach(field => {
    if (field.fieldTypeIsEnum) {
        if (!uniqueEnumImports.has(field.fieldType)) {
            uniqueEnumImports.set(field.fieldType, `import { ${field.fieldType} } from '../../enums/${toKebabCase(field.fieldType)}.model';`);
        }
    }
});

const uniqueRelationshipImports = new Map();
relationships.forEach(rel => {
    if (!uniqueRelationshipImports.has(rel.otherEntityName)) {
        uniqueRelationshipImports.set(rel.otherEntityName, `import { I${rel.otherEntityName} } from '../${toKebabCase(rel.otherEntityName)}/${toKebabCase(rel.otherEntityName)}.model';`);
    }
});

function relationshipPropertyName(rel) {
    const isCollection = ['OneToMany', 'ManyToMany'].includes(rel.type);
    if (rel.from.fieldName) {
        return toCamelCase(rel.from.fieldName);
    }
    return isCollection ? toCamelCase(rel.otherEntityNamePlural) : toCamelCase(rel.otherEntityName);
}
%>
<%- Array.from(uniqueEnumImports.values()).join('\n') %>
<%- Array.from(uniqueRelationshipImports.values()).join('\n') %>

export interface I<%= entity.name %> {
  id?: number;
  <% entity.fields.forEach(field => { %>
  <%
    // Map JDL types to TypeScript types
    const typeMap = {
      'Integer': 'number',
      'Long': 'number',
      'Float': 'number',
      'Double': 'number',
      'BigDecimal': 'number',
      'Instant': 'dayjs.Dayjs',
      'LocalDate': 'dayjs.Dayjs',
      'ZonedDateTime': 'dayjs.Dayjs',
      'Boolean': 'boolean'
    };
    const tsType = typeMap[field.fieldType] || field.fieldType;
  %>
  <%= field.fieldName %>?: <%- tsType %> | null;
  <% }); %>
  <% relationships.forEach(rel => { const propertyName = relationshipPropertyName(rel); const isCollection = ['OneToMany', 'ManyToMany'].includes(rel.type); %>
  <%= propertyName %>?: <%= isCollection ? `I${rel.otherEntityName}[]` : `I${rel.otherEntityName}` %> | null;
  <% }); %>
}

export type New<%= entity.name %> = Omit<I<%= entity.name %>, 'id'> & { id: null };
