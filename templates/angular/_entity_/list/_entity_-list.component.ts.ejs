// This is an EJS template. It generates the list component TypeScript file.
import { AfterViewInit, Component, OnInit, ViewChild, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { HttpResponse } from '@angular/common/http';
import { debounceTime, distinctUntilChanged, startWith, switchMap, catchError, tap, of, merge, Subject, finalize } from 'rxjs';

// Angular Material & Fuse
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatSort, MatSortModule } from '@angular/material/sort';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { MatSidenavModule, MatDrawer } from '@angular/material/sidenav';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatSelectModule } from '@angular/material/select';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { FuseConfirmationService } from '@fuse/services/confirmation';


// Application Imports
import { I<%= entity.name %>, New<%= entity.name %> } from '../<%= toKebabCase(entity.name) %>.model';
import { <%= entity.name %>Service } from '../service/<%= toKebabCase(entity.name) %>.service';
import { <%= entity.name %>FormService, <%= entity.name %>FormGroup } from '../update/<%= toKebabCase(entity.name) %>-form.service';
<%
const uniqueEnumImports = new Map();
entity.fields.forEach(field => {
    if (field.fieldTypeIsEnum) {
        if (!uniqueEnumImports.has(field.fieldType)) {
            uniqueEnumImports.set(field.fieldType, `import { ${field.fieldType} } from '../../../enums/${toKebabCase(field.fieldType)}.model';`);
        }
    }
});
%>
<%- Array.from(uniqueEnumImports.values()).join('\n') %>


@Component({
  selector: 'app-<%= toKebabCase(entity.name) %>-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    ReactiveFormsModule,
    MatTableModule,
    MatSortModule,
    MatSidenavModule,
    MatProgressSpinnerModule,
    MatButtonModule,
    MatFormFieldModule,
    MatIconModule,
    MatInputModule,
    MatTooltipModule,
    MatCheckboxModule,
    MatSelectModule,
    MatPaginatorModule,
    MatDatepickerModule,
    MatNativeDateModule,
  ],
  templateUrl: './<%= toKebabCase(entity.name) %>-list.component.html',
})
export class <%= entity.name %>ListComponent implements AfterViewInit, OnInit {
  // --- Injected Services ---
  private readonly <%= toCamelCase(entity.name) %>Service = inject(<%= entity.name %>Service);
  private readonly <%= toCamelCase(entity.name) %>FormService = inject(<%= entity.name %>FormService);
  private readonly fuseConfirmationService = inject(FuseConfirmationService);
  private readonly router = inject(Router);
  private readonly route = inject(ActivatedRoute);

  // --- State & Triggers ---
  isLoading = true;
  totalItems = 0;
  itemsPerPage = 10; // Default items per page
  private readonly refreshTrigger = new Subject<void>();
  private parentFilters: { [key: string]: string } = {};

  // --- Table & Drawer ---
  @ViewChild('matDrawer') matDrawer!: MatDrawer;
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  
  displayedColumns: string[] = ['id', <% entity.fields.forEach(field => { %>'<%= field.fieldName %>', <% }); %><% if (relationships.length > 0) { %><% relationships.forEach(rel => { %>'actions-<%= rel.otherEntityName %>',<% }); %><% } %> 'actions'];
  dataSource = new MatTableDataSource<I<%= entity.name %>>();
  
  // --- Form ---
  <%= toCamelCase(entity.name) %>Form!: <%= entity.name %>FormGroup;
  drawerMode: 'new' | 'edit' = 'new';
  
  <% entity.fields.forEach(field => { %>
  <% if (field.fieldTypeIsEnum) { %>
  <%= toCamelCase(field.fieldType) %>Options = Object.keys(<%= field.fieldType %>);
  <% } %>
  <% }); %>

  ngOnInit(): void {
  }
  
  ngAfterViewInit(): void {
    this.route.params.pipe(
      switchMap(params => {
        this.parentFilters = {};
        const parentIdKey = Object.keys(params)[0]; 
        if (parentIdKey) {
          const parentModelName = parentIdKey.replace('Id', '');
          this.parentFilters[`${parentModelName}Id.equals`] = params[parentIdKey];
        }
        return merge(this.sort.sortChange, this.paginator.page, this.refreshTrigger).pipe(startWith({}));
      })
    ).subscribe(() => this.loadData());
    this.loadData();
  }

  loadData(): void {
    if (!this.paginator) {
      return;
    }

    this.isLoading = true;
    const req = {
      page: this.paginator.pageIndex,
      size: this.paginator.pageSize,
      sort: this.getSortParameters(),
      ...this.parentFilters,
    };

    this.<%= toCamelCase(entity.name) %>Service.query(req).pipe(
      tap(res => {
        this.isLoading = false;
        this.totalItems = Number(res.headers.get('X-Total-Count') ?? 0);
        this.dataSource.data = res.body ?? [];
      }),
      catchError(() => {
        this.isLoading = false;
        return of(null);
      })
    ).subscribe();
  }

  getSortParameters(): string[] {
    if (!this.sort || !this.sort.active || this.sort.direction === '') {
      return ['id,asc'];
    }
    return [`${this.sort.active},${this.sort.direction}`];
  }

  openDrawer(id?: number): void {
    if (id) {
      this.drawerMode = 'edit';
      this.<%= toCamelCase(entity.name) %>Service.find(id).subscribe(response => {
        if (response.body) {
          this.<%= toCamelCase(entity.name) %>Form = this.<%= toCamelCase(entity.name) %>FormService.create<%= entity.name %>FormGroup(response.body);
          this.matDrawer.open();
        }
      });
    } else {
      this.drawerMode = 'new';
      this.<%= toCamelCase(entity.name) %>Form = this.<%= toCamelCase(entity.name) %>FormService.create<%= entity.name %>FormGroup();
      this.matDrawer.open();
    }
  }

  closeDrawer(): void {
    this.matDrawer.close();
  }

  save(): void {
    if (this.<%= toCamelCase(entity.name) %>Form.invalid) {
      return;
    }
    
    const <%= toCamelCase(entity.name) %> = this.<%= toCamelCase(entity.name) %>FormService.get<%= entity.name %>(this.<%= toCamelCase(entity.name) %>Form);
    
    const saveObservable = 
      this.drawerMode === 'new'
        ? this.<%= toCamelCase(entity.name) %>Service.create(<%= toCamelCase(entity.name) %> as New<%= entity.name %>)
        : this.<%= toCamelCase(entity.name) %>Service.update(<%= toCamelCase(entity.name) %>);

    saveObservable.pipe(finalize(() => this.closeDrawer())).subscribe(() => {
      this.refreshTrigger.next();
      this.loadData();
    });
  }

  delete(id: number): void {
    const confirmation = this.fuseConfirmationService.open({
      title: 'Delete <%= entity.name %>',
      message: 'Are you sure you want to delete this? This action cannot be undone.',
      actions: { confirm: { label: 'Delete' } }
    });

    confirmation.afterClosed().subscribe((result) => {
      if (result === 'confirmed') {
        this.<%= toCamelCase(entity.name) %>Service.delete(id).subscribe(() => {
          this.refreshTrigger.next();
          this.loadData();
        });
      }
    });
  }
  
  <% relationships.forEach(rel => { %>
  show<%= rel.otherEntityNamePascalCase %>(element: I<%= entity.name %>): void {
    this.router.navigate(['/<%= toKebabCase(entity.name) %>', element.id, '/<%= toKebabCase(rel.otherEntityNamePlural) %>']);
  }
  <% }); %>
}
