<!-- This is an EJS template. It generates the HTML for the list component. -->
<mat-drawer-container class="h-full bg-transparent absolute w-full">

  <!-- Main Content (The Table) -->
  <mat-drawer-content class="flex flex-col">
    <div class="absolute inset-0 flex min-w-0 flex-col overflow-hidden h-full">

      <!-- Header -->
      <div class="bg-default dark:bg-transparent flex flex-0 flex-col p-6 pb-22 sm:flex-row sm:items-center sm:justify-between sm:px-10 sm:pb-28 sm:pt-12">
        <div class="min-w-0 flex-1">
          <h2 class="truncate text-3xl font-extrabold leading-7 tracking-tight sm:leading-10 md:text-4xl">
            <%= entity.name %> Management
          </h2>
        </div>
        <!-- Actions -->
        <div class="mt-6 flex shrink-0 items-center sm:ml-4 sm:mt-0">
          <button class="ml-3" mat-flat-button [color]="'primary'" (click)="openDrawer()">
            <mat-icon [svgIcon]="'heroicons_mini:plus'"></mat-icon>
            <span class="ml-2">New <%= entity.name %></span>
          </button>
        </div>
      </div>

      <!-- Table Container -->
      <div class="example-table-container bg-card -mt-16 h-full rounded-t-2xl" style="overflow-x: auto; white-space: nowrap; width: 100%">
        <div *ngIf="isLoading" class="flex items-center justify-center p-8">
          <mat-progress-spinner [diameter]="40" [mode]="'indeterminate'"></mat-progress-spinner>
        </div>

        <table mat-table [dataSource]="dataSource" matSort (matSortChange)="loadData()" *ngIf="!isLoading">

          <!-- Dynamically generate columns for entity fields -->
          <ng-container matColumnDef="id">
            <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>
            <td mat-cell *matCellDef="let element">{{ element.id }}</td>
          </ng-container>
          <% entity.fields.forEach(field => { %>
          <ng-container matColumnDef="<%= field.fieldName %>">
            <th mat-header-cell *matHeaderCellDef mat-sort-header><%= toPascalCase(field.fieldName) %></th>
            <% if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(field.fieldType)) { %>
            <td mat-cell *matCellDef="let element">{{ element.<%= field.fieldName %> | date: 'medium' }}</td>
            <% } else { %>
            <td mat-cell *matCellDef="let element">{{ element.<%= field.fieldName %> }}</td>
            <% } %>
          </ng-container>
          <% }); %>

          <!-- Generate columns for "Show Children" buttons -->
          <% relationships.forEach(rel => { %>
          <ng-container matColumnDef="actions-<%= rel.otherEntityName %>">
            <th mat-header-cell *matHeaderCellDef> <%= rel.otherEntityNamePascalCase %> </th>
            <td mat-cell *matCellDef="let element">
              <button mat-icon-button (click)="show<%= rel.otherEntityNamePascalCase %>(element)" matTooltip="Show <%= rel.otherEntityNamePascalCase %>">
                <mat-icon [svgIcon]="'heroicons_outline:eye'"></mat-icon>
              </button>
            </td>
          </ng-container>
          <% }); %>

          <!-- General Actions Column (Edit/Delete) -->
          <ng-container matColumnDef="actions">
            <th mat-header-cell *matHeaderCellDef>Actions</th>
            <td mat-cell *matCellDef="let element">
              <button mat-icon-button (click)="openDrawer(element.id)" matTooltip="Edit <%= entity.name %>">
                <mat-icon [svgIcon]="'heroicons_outline:pencil-square'"></mat-icon>
              </button>
              <button mat-icon-button (click)="delete(element.id)" matTooltip="Delete <%= entity.name %>">
                <mat-icon class="text-warn" [svgIcon]="'heroicons_outline:trash'"></mat-icon>
              </button>
            </td>
          </ng-container>

          <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
          <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>

          <tr class="mat-row" *matNoDataRow>
            <td class="mat-cell" [attr.colspan]="displayedColumns.length">No data found.</td>
          </tr>
        </table>
      </div>

      <!-- Paginator -->
      <mat-paginator [length]="totalItems" [pageSize]="itemsPerPage" [pageSizeOptions]="[10, 25, 50, 100]" (page)="loadData()"></mat-paginator>
    </div>
  </mat-drawer-content>

  <!-- Side Drawer for Form -->
  <mat-drawer #matDrawer mode="over" position="end" class="w-1/3 min-w-96">
    <div *ngIf="<%= toCamelCase(entity.name) %>Form" class="flex flex-col h-full p-6 bg-card">
      <div class="pb-4 border-b">
        <h2 class="text-2xl font-bold">{{ drawerMode === 'new' ? 'New' : 'Edit' }} <%= entity.name %></h2>
      </div>
      <form [formGroup]="<%= toCamelCase(entity.name) %>Form" class="flex-auto overflow-y-auto pt-6">
        <!-- Dynamically generate form fields based on type -->
        <% entity.fields.forEach(field => { %>
          <% if (field.fieldTypeIsEnum) { %>
        <!-- Mat-select for Enum -->
        <mat-form-field class="w-full">
          <mat-label><%= toPascalCase(field.fieldName) %></mat-label>
          <mat-select formControlName="<%= field.fieldName %>">
            <mat-option *ngFor="let option of <%= toCamelCase(field.fieldType) %>Options" [value]="option">
              {{ option }}
            </mat-option>
          </mat-select>
        </mat-form-field>
          <% } else if (field.fieldType === 'Boolean') { %>
        <!-- Mat-checkbox for Boolean -->
        <mat-checkbox class="w-full my-4" formControlName="<%= field.fieldName %>">
          <%= toPascalCase(field.fieldName) %>
        </mat-checkbox>
          <% } else if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(field.fieldType)) { %>
        <!-- Mat-datepicker for Date fields -->
        <mat-form-field class="w-full">
            <mat-label><%= toPascalCase(field.fieldName) %></mat-label>
            <input matInput [matDatepicker]="picker<%= field.fieldName %>" formControlName="<%= field.fieldName %>">
            <mat-datepicker-toggle matSuffix [for]="picker<%= field.fieldName %>"></mat-datepicker-toggle>
            <mat-datepicker #picker<%= field.fieldName %>></mat-datepicker>
        </mat-form-field>
          <% } else { %>
        <!-- Default Mat-input for other types -->
        <mat-form-field class="w-full">
          <mat-label><%= toPascalCase(field.fieldName) %></mat-label>
          <input matInput formControlName="<%= field.fieldName %>" <% if (field.fieldValidateRules.includes('required')) { %>required<% } %>>
        </mat-form-field>
          <% } %>
        <% }); %>
      </form>
      <div class="flex items-center justify-end mt-6 pt-6 border-t">
        <button mat-button (click)="closeDrawer()">Cancel</button>
        <button mat-flat-button color="primary" class="ml-3" (click)="save()" [disabled]="<%= toCamelCase(entity.name) %>Form.invalid">Save</button>
      </div>
    </div>
  </mat-drawer>
</mat-drawer-container>
