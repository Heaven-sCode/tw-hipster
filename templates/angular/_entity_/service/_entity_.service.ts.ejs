// This is an EJS template. It generates the main data service for the entity.
import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpResponse, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import dayjs from 'dayjs/esm';

import { I<%= entity.name %>, New<%= entity.name %> } from '../<%= toKebabCase(entity.name) %>.model';

<% 
// Helper to find all date fields to avoid duplicating logic
const dateFields = entity.fields.filter(f => ['LocalDate', 'Instant', 'ZonedDateTime'].includes(f.fieldType));
const hasDateFields = dateFields.length > 0;
%>

export type PartialUpdate<%= entity.name %> = Partial<I<%= entity.name %>> & Pick<I<%= entity.name %>, 'id'>;

// --- Define REST-safe types by converting Dayjs objects to strings ---
type RestOf<T extends I<%= entity.name %> | New<%= entity.name %> | PartialUpdate<%= entity.name %>> = Omit<T, <%- hasDateFields ? dateFields.map(f => `'${f.fieldName}'`).join(' | ') : '' %>> & {
  <% dateFields.forEach(field => { %>
  <%= field.fieldName %>?: string | null;
  <% }); %>
};

export type Rest<%= entity.name %> = RestOf<I<%= entity.name %>>;
export type NewRest<%= entity.name %> = RestOf<New<%= entity.name %>>;
export type PartialUpdateRest<%= entity.name %> = RestOf<PartialUpdate<%= entity.name %>>;

export type EntityResponseType = HttpResponse<I<%= entity.name %>>;
export type EntityArrayResponseType = HttpResponse<I<%= entity.name %>[]>;


@Injectable({ providedIn: 'root' })
export class <%= entity.name %>Service {
  protected readonly http = inject(HttpClient);

  // FIX: Ensure the microservice name from the config is always lowercase in the URL.
  protected resourceUrl = `/<%= config.microservice ? 'services/' + config.microservice.toLowerCase() : '' %>/api/<%= toKebabCase(entity.name) %>s`;

  create(payload: New<%= entity.name %>): Observable<EntityResponseType> {
    const copy = this.convertDateFromClient(payload);
    return this.http.post<Rest<%= entity.name %>>(this.resourceUrl, copy, { observe: 'response' }).pipe(map(res => this.convertResponseFromServer(res)));
  }

  update(payload: I<%= entity.name %>): Observable<EntityResponseType> {
    const copy = this.convertDateFromClient(payload);
    return this.http.put<Rest<%= entity.name %>>(`${this.resourceUrl}/${payload.id}`, copy, { observe: 'response' }).pipe(map(res => this.convertResponseFromServer(res)));
  }

  find(id: number): Observable<EntityResponseType> {
    return this.http.get<Rest<%= entity.name %>>(`${this.resourceUrl}/${id}`, { observe: 'response' }).pipe(map(res => this.convertResponseFromServer(res)));
  }

  query(req?: any): Observable<EntityArrayResponseType> {
    const options = this.createRequestOption(req);
    return this.http.get<Rest<%= entity.name %>[]>(this.resourceUrl, { params: options, observe: 'response' }).pipe(map(res => this.convertResponseArrayFromServer(res)));
  }

  delete(id: number): Observable<HttpResponse<{}>> {
    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });
  }

  protected createRequestOption(req?: any): HttpParams {
    let options: HttpParams = new HttpParams();
    if (req) {
      Object.keys(req).forEach(key => {
        if (req[key] !== null && req[key] !== undefined) {
          options = options.set(key, req[key]);
        }
      });
    }
    return options;
  };

  // --- Date Conversion Helpers ---
  protected convertDateFromClient<T extends I<%= entity.name %> | New<%= entity.name %> | PartialUpdate<%= entity.name %>>(entity: T): RestOf<T> {
    const copy: any = { ...entity };
    <% dateFields.forEach(field => { %>
    if (dayjs.isDayjs(entity.<%= field.fieldName %>)) {
      copy.<%= field.fieldName %> = entity.<%= field.fieldName %>.toJSON();
    }
    <% }); %>
    return copy;
  }

  protected convertDateFromServer(restEntity: Rest<%= entity.name %>): I<%= entity.name %> {
    const entity: any = { ...restEntity };
    <% dateFields.forEach(field => { %>
    if (entity.<%= field.fieldName %>) {
        entity.<%= field.fieldName %> = dayjs(entity.<%= field.fieldName %>);
    }
    <% }); %>
    return entity;
  }
  
  protected convertResponseFromServer(res: HttpResponse<Rest<%= entity.name %>>): HttpResponse<I<%= entity.name %>> {
    return res.clone({ body: res.body ? this.convertDateFromServer(res.body) : null });
  }

  protected convertResponseArrayFromServer(res: HttpResponse<Rest<%= entity.name %>[]>): HttpResponse<I<%= entity.name %>[]> {
    return res.clone({ body: res.body ? res.body.map(item => this.convertDateFromServer(item)) : null });
  }
}
